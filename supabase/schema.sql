--
-- CulinAI Database Schema
--
-- This script defines the complete database structure, including tables,
-- helper functions, and Row Level Security policies.
--

--
-- 1. Create tables
--

-- Profiles table to store user-specific data
create table if not exists public.profiles (
  id uuid not null primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  dietary_needs jsonb default '{}'::jsonb not null,
  preferences text,
  role text default 'user'::text not null,
  constraint profiles_id_fkey foreign key (id) references auth.users (id) on delete cascade
);
comment on table public.profiles is 'Stores user-specific data like preferences and roles.';

-- Pantry items table
create table if not exists public.pantry_items (
  id uuid default gen_random_uuid() not null primary key,
  user_id uuid default auth.uid() not null,
  name text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint pantry_items_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
);
comment on table public.pantry_items is 'Stores ingredients available in a user''s pantry.';

-- Invite codes table
create table if not exists public.invite_codes (
  id bigint generated by default as identity not null primary key,
  code text not null unique,
  created_at timestamp with time zone default now() not null,
  is_used boolean default false not null,
  used_by uuid null,
  used_at timestamp with time zone null,
  constraint invite_codes_used_by_fkey foreign key (used_by) references auth.users(id) on delete set null
);
comment on table public.invite_codes is 'Stores invite codes for new user sign-ups.';


-- Saved recipes table
create table if not exists public.saved_recipes (
  id uuid default gen_random_uuid() not null primary key,
  user_id uuid default auth.uid() not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  recipe_name text not null,
  ingredients text not null,
  instructions text not null,
  nutrition jsonb,
  image_url text,
  constraint saved_recipes_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
);
comment on table public.saved_recipes is 'Stores recipes that users have saved.';

-- Shopping list items table
create table if not exists public.shopping_list_items (
  id uuid default gen_random_uuid() not null primary key,
  user_id uuid default auth.uid() not null,
  item_name text not null,
  is_checked boolean default false not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint shopping_list_items_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
);
comment on table public.shopping_list_items is 'Stores items for the user''s shopping list.';

-- Recipe ratings table
create table if not exists public.recipe_ratings (
  id uuid default gen_random_uuid() not null primary key,
  user_id uuid default auth.uid() not null,
  recipe_id uuid not null,
  rating smallint not null constraint rating_check check (rating >= 1 and rating <= 5),
  notes text,
  photo_url text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint recipe_ratings_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade,
  constraint recipe_ratings_recipe_id_fkey foreign key (recipe_id) references public.saved_recipes (id) on delete cascade
);
comment on table public.recipe_ratings is 'Stores user ratings and notes for saved recipes.';

-- Conversations table
create table if not exists public.conversations (
  id uuid default gen_random_uuid() not null primary key,
  user_id uuid default auth.uid() not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint conversations_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
);
comment on table public.conversations is 'Stores chat conversations with the AI assistant.';

-- Messages table
create table if not exists public.messages (
  id uuid default gen_random_uuid() not null primary key,
  conversation_id uuid not null,
  speaker text not null, -- 'user' or 'ai'
  text_content text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint messages_conversation_id_fkey foreign key (conversation_id) references public.conversations (id) on delete cascade
);
comment on table public.messages is 'Stores individual messages within a conversation.';

-- Community Recipes Table (user-submitted)
create table if not exists public.community_recipes (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  title text not null,
  description text,
  cuisine text,
  servings int,
  prep_time int,
  cook_time int,
  total_time int,
  difficulty text,
  ingredients jsonb not null,
  instructions jsonb not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Community Recipe Likes
create table if not exists public.community_recipe_likes (
  id serial primary key,
  recipe_id uuid references public.community_recipes(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  created_at timestamptz default now(),
  unique (recipe_id, user_id)
);

-- Community Recipe Comments
create table if not exists public.community_recipe_comments (
  id serial primary key,
  recipe_id uuid references public.community_recipes(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  comment text not null,
  created_at timestamptz default now()
);


--
-- 2. Create helper functions
--

-- Function to get the role of a user. This is crucial for RLS policies.
create or replace function public.get_user_role(user_id uuid)
returns text
language sql
security definer
set search_path = public
stable
as $$
  select role from public.profiles where id = user_id
$$;

-- Function to automatically create a profile on new user sign-up.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, role)
  values (new.id, 'user');
  return new;
end;
$$;


--
-- 3. Set up Triggers
--

-- Trigger to call handle_new_user on new user creation in auth.users
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


--
-- 4. Set up Row Level Security (RLS)
--

-- Enable RLS for all tables that store user data
alter table public.profiles enable row level security;
alter table public.pantry_items enable row level security;
alter table public.saved_recipes enable row level security;
alter table public.shopping_list_items enable row level security;
alter table public.recipe_ratings enable row level security;
alter table public.conversations enable row level security;
alter table public.messages enable row level security;
alter table public.community_recipes enable row level security;
alter table public.community_recipe_likes enable row level security;
alter table public.community_recipe_comments enable row level security;
-- No RLS for invite_codes, as it's accessed securely via service_role key.

--
-- 5. Create RLS policies
--

-- Profiles policies
drop policy if exists "Users can view their own profile." on public.profiles;
create policy "Users can view their own profile." on public.profiles for select
  using (auth.uid() = id);

drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile." on public.profiles for update
  using (auth.uid() = id);
  
drop policy if exists "Admins can manage all profiles." on public.profiles;
create policy "Admins can manage all profiles." on public.profiles for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Pantry items policies
drop policy if exists "Users can manage their own pantry items." on public.pantry_items;
create policy "Users can manage their own pantry items." on public.pantry_items for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all pantry items." on public.pantry_items;
create policy "Admins can manage all pantry items." on public.pantry_items for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Saved recipes policies
drop policy if exists "Users can manage their own saved recipes." on public.saved_recipes;
create policy "Users can manage their own saved recipes." on public.saved_recipes for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all saved recipes." on public.saved_recipes;
create policy "Admins can manage all saved recipes." on public.saved_recipes for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Shopping list policies
drop policy if exists "Users can manage their own shopping list." on public.shopping_list_items;
create policy "Users can manage their own shopping list." on public.shopping_list_items for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all shopping lists." on public.shopping_list_items;
create policy "Admins can manage all shopping lists." on public.shopping_list_items for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Recipe ratings policies
drop policy if exists "Users can manage their own ratings." on public.recipe_ratings;
create policy "Users can manage their own ratings." on public.recipe_ratings for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all ratings." on public.recipe_ratings;
create policy "Admins can manage all ratings." on public.recipe_ratings for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Conversations policies
drop policy if exists "Users can manage their own conversations." on public.conversations;
create policy "Users can manage their own conversations." on public.conversations for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all conversations." on public.conversations;
create policy "Admins can manage all conversations." on public.conversations for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Messages policies
drop policy if exists "Users can manage messages in their conversations." on public.messages;
create policy "Users can manage messages in their conversations." on public.messages for all
  using (
    exists (
      select 1 from public.conversations
      where conversations.id = messages.conversation_id
      and conversations.user_id = auth.uid()
    )
  );

drop policy if exists "Admins can manage all messages." on public.messages;
create policy "Admins can manage all messages." on public.messages for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Community Recipes policies
drop policy if exists "Users can manage their own community recipes." on public.community_recipes;
create policy "Users can manage their own community recipes." on public.community_recipes for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all community recipes." on public.community_recipes;
create policy "Admins can manage all community recipes." on public.community_recipes for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Community Recipe Likes policies
drop policy if exists "Users can like recipes." on public.community_recipe_likes;
create policy "Users can like recipes." on public.community_recipe_likes for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all recipe likes." on public.community_recipe_likes;
create policy "Admins can manage all recipe likes." on public.community_recipe_likes for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Community Recipe Comments policies
drop policy if exists "Users can comment on recipes." on public.community_recipe_comments;
create policy "Users can comment on recipes." on public.community_recipe_comments for all
  using (auth.uid() = user_id);

drop policy if exists "Admins can manage all recipe comments." on public.community_recipe_comments;
create policy "Admins can manage all recipe comments." on public.community_recipe_comments for all
  using (public.get_user_role(auth.uid()) = 'admin');

-- Add a source and mood column for AI and mood-based recipes
alter table if exists public.community_recipes
  add column if not exists source text default 'community',
  add column if not exists mood text;
